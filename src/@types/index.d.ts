type ObjectLiteral = {
  [key: string]: any;
};

type TProps = {
  animateCardOpacity: boolean;
  animateOverlayLabelsOpacity: boolean;
  backgroundColor: string;
  cardHorizontalMargin: number;
  cardIndex: number;
  cardStyle: number | ObjectLiteral;
  cardVerticalMargin: number;
  cards?: any[] | ObjectLiteral;
  containerStyle: object;
  children: any;
  childrenOnTo?: boolean;
  dragEnd: () => void;
  dragStart: () => void;
  disableBottomSwipe: boolean;
  disableLeftSwipe: boolean;
  disableRightSwipe: boolean;
  disableTopSwipe: boolean;
  goBackToPreviousCardOnSwipeBottom: boolean;
  goBackToPreviousCardOnSwipeLeft: boolean;
  goBackToPreviousCardOnSwipeRight: boolean;
  goBackToPreviousCardOnSwipeTop: boolean;
  horizontalSwipe: boolean;
  horizontalThreshold: number;
  infinite: boolean;
  inputCardOpacityRangeX: any[];
  inputCardOpacityRangeY: any[];
  inputOverlayLabelsOpacityRangeX: any[];
  inputOverlayLabelsOpacityRangeY: any[];
  inputCardOpacityRange: any[];
  inputRotationRange: any[];
  keyExtractor: () => void;
  marginBottom: number;
  marginTop: number;
  onSwiped: () => void;
  onSwipedAborted: () => void;
  onSwipedAll: () => void;
  onSwipedBottom: () => void;
  onSwipedLeft: () => void;
  onSwipedRight: () => void;
  onSwipedTop: () => void;
  onSwiping: () => void;
  onTapCard: () => void;
  onTapCardDeadZone: number;
  outputCardOpacityRangeX: any[];
  outputCardOpacityRangeY: any[];
  outputOverlayLabelsOpacityRangeX: any[];
  outputOverlayLabelsOpacityRangeY: any[];
  outputRotationRange: any[];
  outputCardOpacityRange: any[];
  overlayLabels: object;
  overlayLabelStyle: object;
  overlayLabelWrapperStyle: object;
  overlayOpacityHorizontalThreshold: number;
  overlayOpacityVerticalThreshold: number;
  pointerEvents: "box-none" | "none" | "box-only" | "auto";
  previousCardDefaultPositionX: number;
  previousCardDefaultPositionY: number;
  renderCard?: () => void;
  secondCardZoom: number;
  showSecondCard: boolean;
  stackAnimationFriction: number;
  stackAnimationTension: number;
  stackScale: number;
  stackSeparation: number;
  stackSize: number;
  swipeAnimationDuration: number;
  swipeBackCard: boolean;
  topCardResetAnimationFriction: number;
  topCardResetAnimationTension: number;
  useViewOverflow: boolean;
  verticalSwipe: boolean;
  verticalThreshold: number;
  zoomAnimationDuration: number;
  zoomFriction: number;
};

// Swiper.= {
//
// };
